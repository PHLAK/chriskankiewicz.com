openapi: 3.0.0

servers:
  - url: https://chriskankiewicz.com/api

info:
  title: Chris's Resume as a Service
  description: Chris Kankiewicz's Resume as a Service.
  version: 1.0.0
  license:
    name: MIT
    url: https://choosealicense.com/licenses/mit/
  contact:
    name: API Support
    email: Chris@ChrisKankiewicz.com
    url: https://github.com/PHLAK/chriskankiewicz.com

tags:
  - name: Education
    description: Schools attended and degrees earned.
  - name: Experience
    description: Porfessional work history.
  - name: Projects
    description: Personal and professional projects.
  - name: Skills
    description: Skills and areas of knowledge.

paths:
  /education:
    get:
      summary: List Education
      description: Returns a list of all education.
      tags:
        - Education
      responses:
        '200':
          description: A list of education
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/id'
                    - $ref: '#/components/schemas/Education'

    post:
      summary: Create Education
      description: Creates a new experience.
      tags:
        - Education
      security:
        - BearrerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Education'
      responses:
        '201':
          description: The created education
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/Education'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'

  /education/{id}:
    get:
      summary: Fetch Education
      description: Returns a single education.
      tags:
        - Education
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1337
      responses:
        '200':
          description: A single education
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/Education'
        '404':
          $ref: '#/components/responses/404'

    patch:
      summary: Update Education
      description: Updates an education.
      tags:
        - Education
      security:
        - BearrerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1337
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Education'
      responses:
        '200':
          description: The updated education
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/Education'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'

    delete:
      summary: Delete Education
      description: Deletes an education.
      tags:
        - Education
      security:
        - BearrerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1337
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'

  /experience:
    get:
      summary: List Experiences
      description: Returns a list of all experiences.
      tags:
        - Experience
      responses:
        '200':
          description: A list of experiences
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/id'
                    - $ref: '#/components/schemas/Experience'

    post:
      summary: Create Experience
      description: Creates a new experience.
      tags:
        - Experience
      security:
        - BearrerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Experience'
      responses:
        '201':
          description: The created experience
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/Experience'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'

  /experience/{id}:
    get:
      summary: Fetch Experience
      description: Returns a single experience.
      tags:
        - Experience
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1337
      responses:
        '200':
          description: A single experience
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/Experience'
        '404':
          $ref: '#/components/responses/404'

    patch:
      summary: Update Experience
      description: Updates an experience.
      tags:
        - Experience
      security:
        - BearrerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1337
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Experience'
      responses:
        '200':
          description: The updated experience
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/Experience'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'

    delete:
      summary: Delete Experience
      description: Deletes an experience.
      tags:
        - Experience
      security:
        - BearrerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1337
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'

  /project:
    get:
      summary: List Projects
      description: Returns a list of all projects.
      tags:
        - Projects
      responses:
        '200':
          description: A list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/id'
                    - $ref: '#/components/schemas/Project'

    post:
      summary: Create Project
      description: Creates a new project.
      tags:
        - Projects
      security:
        - BearrerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: The created project
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'

  /project/{id}:
    get:
      summary: Fetch Project
      description: Returns a single project.
      tags:
        - Projects
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1337
      responses:
        '200':
          description: A single project
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/Project'
        '404':
          $ref: '#/components/responses/404'

    patch:
      summary: Update Project
      description: Updates a project.
      tags:
        - Projects
      security:
        - BearrerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1337
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: The updated project
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'

    delete:
      summary: Delete Project
      description: Deletes a project.
      tags:
        - Projects
      security:
        - BearrerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1337
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'

  /skill:
    get:
      summary: List Skills
      description: Returns a list of all skills.
      tags:
        - Skills
      responses:
        '200':
          description: A list of skills
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/id'
                    - $ref: '#/components/schemas/Skill'

    post:
      summary: Create Skill
      description: Creates a new skill.
      tags:
        - Skills
      security:
        - BearrerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
      responses:
        '201':
          description: The created skill
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/Skill'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'

  /skill/{id}:
    get:
      summary: Fetch Skill
      description: Returns a single skill.
      tags:
        - Skills
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1337
      responses:
        '200':
          description: A single skill
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/Skill'
        '404':
          $ref: '#/components/responses/404'

    patch:
      summary: Update Skill
      description: Updates a skill.
      tags:
        - Skills
      security:
        - BearrerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1337
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
      responses:
        '200':
          description: The updated skill
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/id'
                  - $ref: '#/components/schemas/Skill'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'

    delete:
      summary: Delete Skill
      description: Deletes a skill.
      tags:
        - Skills
      security:
        - BearrerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1337
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'

components:
  schemas:
    Education:
      type: object
      properties:
        institution:
          type: string
          example: Hogwarts School of Witchcraft and Wizardry
        degree:
          type: string
          example: Care of Magical Creatures
        start_date:
          type: string
          example: '1986-05-20 00:00:00'
        end_date:
          type: string
          example: '1986-07-06 00:00:00'
      required:
        - institution
        - degree
        - start_date

    Experience:
      type: object
      properties:
        company:
          type: string
          example: Pied Piper
        title:
          type: string
          example: Data Janitor
        start_date:
          type: string
          example: '1986-05-20 00:00:00'
        end_date:
          type: string
          example: '1986-07-06 00:00:00'
        location:
          type: string
          example: San Francisco, California
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
      required:
        - company
        - title
        - start_date
        - location

    Project:
      type: object
      properties:
        name:
          type: string
          example: Death Star
        description:
          type: string
          example: That's no moon!
        project_url:
          type: string
          example: https://en.wikipedia.org/wiki/Death_star
        source_url:
          type: string
          example: https://github.com/PHLAK/death-star
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
      required:
        - name

    Skill:
      type: object
      properties:
        name:
          type: string
          example: Lockpicking
        icon_name:
          type: string
          example: lock
        icon_style:
          type: string
          example: fal
      required:
        - name

    id:
      type: object
      properties:
        id:
          type: integer
          example: 1337

  responses:
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: No query results for model

    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthenticated.

    '422':
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: The given data was invalid.
              errors:
                type: object
                properties:
                  field_name:
                    type: array
                    items:
                      type: string
                      example: Some error message

  securitySchemes:
    BearrerAuth:
      type: http
      scheme: bearer
